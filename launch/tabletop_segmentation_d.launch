<!-- Entry point for using OpenNI devices -->
<launch>

 <node pkg="visual_perception" name="object_managing" type="object_managing" respawn="true" output="screen">

    </node> 

    <!-- <arg name="tabletop_segmentation_points_in" default="/camera/depth_registered/points" />  -->
    <arg name="tabletop_segmentation_points_in" default="/head_asus/head_asus/depth_registered/points" /> 
      <!-- <arg name="tabletop_segmentation_points_in" default=" /head_asus/head_asus/depth/image_raw" />  -->
    <arg name="tabletop_segmentation_convert_to_base_link" default="false" />
    <arg name="tabletop_segmentation_clustering_voxel_size" default="0.001" />
    <arg name="flatten_table" default="false"/>
    <arg name="table_padding" default="0.02"/>
   
<!--DISPLAY ROBOT-->
<!-- 
    <arg name="gui" default="True" />
    <param name="use_gui" value="$(arg gui)"/>

     This is required to test any posture of the robot by writing on the joint states /
    <rosparam param="source_list">[joint_states]</rosparam>
    
    <param name="robot_description" command="$(find xacro)/xacro.py $(find unipi_robot)/urdf/unipi_robot.urdf.xacro"/>  -->
<!--     <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" /> -->

  <!--HARD CALIBRATION-->
   


<!--     <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher" args="0.030470 0.599876 0.287167 0.606218 0.605960 -0.364434 0.364005 /camera_rgb_optical_frame /world_link 1 " /> -->
   




    <node name="tabletop_segmentation"  pkg="visual_perception"   type="tabletop_segmentation" respawn="true" output="screen">
	<!--topic remapping-->
        <remap from="cloud_in" to="$(arg tabletop_segmentation_points_in)" />

        <remap from="segmentation_srv" to="tabletop_segmentation" />
        <remap from="markers_out" to="tabletop_segmentation_markers" />

	<param name="clustering_voxel_size" value="$(arg tabletop_segmentation_clustering_voxel_size)" />
	<param name="inlier_threshold" value="300" />
	<param name="plane_detection_voxel_size" value="0.01" />
	<param name="cluster_distance" value="0.03" />
	<param name="min_cluster_size" value="100" />
	<param name="flatten_table" value="$(arg flatten_table)" />
	<param name="table_padding" value="$(arg table_padding)" />

	<!-- processing and filtering frame -->
	<!-- all clouds converted to and processed in base link frame -->
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="processing_frame" value="calib_kimp_right_arm_base_link" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="up_direction" value="-2.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_min" value="0.01" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_max" value="3" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_min" value="-1.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_max" value="1.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_min" value="-1.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_max" value="1.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_min" value="0.02" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_max" value="2.5" />		

	<!-- all clouds will be processed in the incoming frame, which is -->
	<!-- assumed to the the camera's optical frame -->
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="processing_frame" value="" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="up_direction" value="-2.0" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_min" value="0.1" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_max" value="2.12" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_min" value="-2.5" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_max" value="2.5" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_min" value="-2.5" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_max" value="2.5" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_min" value="0.02" />
	<param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_max" value="2.6" />			

    </node>
    <node pkg="visual_perception" name="cylinder_fitting" type="cylinder_fitting" respawn="true" output="screen">


  </node>



  
    <node pkg="visual_perception" name="sphere_fitting" type="sphere_fitting" respawn="true" output="screen">


 


   </node>
 <!--    <node pkg="visual_perception" name="cone_fitting" type="cone_fitting" respawn="true" output="screen"> 

   </node>
   -->
 
 <node pkg="visual_perception" name="parallelepiped_fitting" type="parallelepiped_fitting" respawn="true" output="screen">

   </node>
  <!--  
   <node pkg="visual_perception" name="new_parallelepiped_fitting" type="new_parallelepiped_fitting" respawn="true" output="screen">

   </node>
-->


   


 
</launch>
